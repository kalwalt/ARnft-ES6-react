{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["pathName","window","location","pathname","config","console","log","ARnft","init","then","nft","mat","THREE","color","boxGeom","cube","position","z","scale","set","root","matrixAutoUpdate","document","addEventListener","ev","canvas","getElementById","Math","PI","clientWidth","clientHeight","sceneThreejs","ARnftThreejs","uuid","initRenderer","add","tick","draw","requestAnimationFrame","catch","error","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wPAMA,MAAMA,EAAWC,OAAOC,SAASC,SACjC,IAAIC,EACJC,QAAQC,IAAIN,GAEVI,EADe,qBAAbJ,EACO,+BAEA,cAGXO,QAAMC,KAAK,IAAK,IAAK,kCAAmCJ,GAAQ,GAC7DK,MAAMC,IACL,IAAIC,EAAM,IAAIC,sBAA0B,CAAEC,MAAO,WAC7CC,EAAU,IAAIF,cAAkB,EAAG,EAAG,GACtCG,EAAO,IAAIH,OAAWE,EAASH,GACnCI,EAAKC,SAASC,EAAI,GAClBF,EAAKG,MAAMC,IAAI,IAAK,IAAK,KAEzB,IAAIC,EAAO,IAAIR,WACfQ,EAAKC,kBAAmB,EACxBC,SAASC,iBAAiB,kBAAkB,SAAUC,GAEpD,IAAIC,EAASH,SAASI,eAAe,UAGjCtB,EAAS,CACX,SAAY,CACV,OAAS,EACT,WAAa,EACb,QAAW,KACX,UAAa,UACb,oBAAsB,EACtB,SAAW,EACX,OAAS,EACT,wBAA0B,EAC1B,eAAiB,GAEnB,OAAU,CACR,IAfM,IAAYuB,KAAKC,GAgBvB,MAfQ3B,OAAO4B,YAAc5B,OAAO6B,aAgBpC,KAAQ,IACR,IAAO,MAIPC,EAAe,IAAIC,mBAA8B5B,EAAQqB,EAAQL,EAAMV,EAAIuB,MAAM,GACrFF,EAAaG,eAEG,IAAIF,YAAuBZ,GACjCe,IAAIpB,GAEd,MAAMqB,EAAO,KACXL,EAAaM,OACbpC,OAAOqC,sBAAsBF,IAE/BA,UAGDG,OAAOC,IACRnC,QAAQC,IAAIkC,MAYDC,MAPf,WACE,OACE,yBC3DgBC,QACW,cAA7BzC,OAAOC,SAASyC,UAEe,UAA7B1C,OAAOC,SAASyC,UAEhB1C,OAAOC,SAASyC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzB,SAASI,eAAe,SDyHpB,kBAAmBsB,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK0C,IACJA,EAAaC,gBAEdb,OAAMC,IACLnC,QAAQmC,MAAMA,EAAMa,c","file":"static/js/main.df7d9e18.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { ARnft } from '@webarkit/ar-nft';\nimport * as ARnftThreejs  from '@webarkit/arnft-threejs';\nimport * as THREE from 'three'\n\nconst pathName = window.location.pathname\nlet config;\nconsole.log(pathName);\nif (pathName === '/ARnft-ES6-react'){\n  config = '/ARnft-ES6-react/config.json'\n} else {\n  config = 'config.json'\n}\n\nARnft.init(640, 480, \"ARnft-ES6-react/DataNFT/pinball\", config, true)\n  .then((nft) => {\n    let mat = new THREE.MeshLambertMaterial({ color: 0xff0000 });\n    let boxGeom = new THREE.BoxGeometry(1, 1, 1);\n    let cube = new THREE.Mesh(boxGeom, mat);\n    cube.position.z = 90;\n    cube.scale.set(180, 180, 180);\n\n    let root = new THREE.Object3D();\n    root.matrixAutoUpdate = false;\n    document.addEventListener('containerEvent', function (ev) {\n\n      let canvas = document.getElementById('canvas');\n      let fov = 0.8 * 180 / Math.PI;\n      let ratio = window.clientWidth / window.clientHeight;\n      let config = {\n        \"renderer\": {\n          \"alpha\": true,\n          \"antialias\": true,\n          \"context\": null,\n          \"precision\": \"mediump\",\n          \"premultipliedAlpha\": true,\n          \"stencil\": true,\n          \"depth\": true,\n          \"logarithmicDepthBuffer\": true,\n          \"objVisibility\": false\n        },\n        \"camera\": {\n          \"fov\": fov,\n          \"ratio\": ratio,\n          \"near\": 0.01,\n          \"far\": 1000\n        }\n      }\n\n      let sceneThreejs = new ARnftThreejs.SceneRendererTJS(config, canvas, root, nft.uuid, true);\n      sceneThreejs.initRenderer();\n\n      let nftAddTJS = new ARnftThreejs.NFTaddTJS(root);\n      nftAddTJS.add(cube);\n\n      const tick = () => {\n        sceneThreejs.draw();\n        window.requestAnimationFrame(tick)\n      }\n      tick()\n\n    })\n  }).catch((error) => {\n    console.log(error);\n  });\n\n\n\nfunction App() {\n  return (\n    <div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}